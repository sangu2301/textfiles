package main

import (
	"fmt"
	"strings"
)

func main() {

	s := "Oh I do like to be beside the seaside"
	fmt.Println(s)
	fmt.Println(strings.ToUpper(s))
	fmt.Println(strings.Index(s, "the"))
	fmt.Println(strings.Replace(s, "seaside", "bar", -1))

}

for i := 0; i < 4; i++ {
		fmt.Printf("hi\n")
	}

INFINTE LOOP:
for {fmt.Printf("hi\n")
	}

                FOR WHILE:

func main() {
i := 0
for i < 3 {
i += 2
}
fmt.Println(i)
}

func main() {
rvariable := []string{"hi", "hello", "bye"}
for i, j := range rvariable {
fmt.Println(i, j)
	}

}

for i, j := range "XabCd" {
fmt.Println("The index number of %U is %d\n", j, i)
	}

                    MAP:

mmap := map[int]string{
		1: "hi",
		2: "bye",
	}
	for i, j := range mmap {
		fmt.Println(j, i)
	}

                                      STRUCT:

type movie struct {
	Name   string
	Rating float32
}

func main() {
	m := movie{
		Name:   "hi",
		Rating: 10,
	}
	fmt.Println(m.Name, m.Rating)

}

type movie struct {
	Name   string
	Rating float32
}

func main() {
	var m movie
	fmt.printf("%+v\n", m)
	m.Name = "sangu"
	m.Rating = 10
	fmt.printf("%+v\n", m)


m := new(movie)
	m.Name = "sangu"
	m.Rating = 10
	fmt.Println("%+v\n", m)



                                               NESTED STRUCT

type movie struct {
	Name    string
	Rating  float32
	Address Address
}

type Address struct {
	Number int
	city   string
}

func main() {
	e := movie{
		Name:   "batman",
		Rating: 10,
		Address: Address{
			Number: 1007,
			city:   "CHENNAI",
		},
	}

	fmt.Printf("%+v\n", e)



CONSTRUCTOR VALUES:
type Alarm struct {
	time  string
	sound string
}

func NewAlarm(time string) Alarm {
	a := Alarm{
		time:  time,
		sound: "klaxon",
	}
	return a
}
func main() {

	fmt.Printf("%+v\n", NewAlarm("07:00"))
}


COMARING STRUCT VALUES:
type Alarm struct {
	time  string
	sound string
}

func main() {
	a := Alarm{
		time:  "04:30",
		sound: "klaxon",
	}
	b := Alarm{
		time:  "04:30",
		sound: "klaxon",
	}
	if a == b {
		fmt.Println("a and b are same")
	}
	fmt.Printf("%+v\n", a)
	fmt.Printf("%+v\n", b)
}




POINTER AND VALUES:

type Alarm struct {
	time  string
	sound string
}

func main() {
	a := Alarm{
		time:  "04:30",
		sound: "klaxon",
	}
	b := a
	b.time = "6:30"

	fmt.Printf("%+v\n", b)
	fmt.Printf("%+v\n", a)
	fmt.Printf("%p\n", &b)
	fmt.Printf("%p\n", &a)



}

func main() {
	a := Alarm{
		time:  "04:30",
		sound: "klaxon",
	}
	b := &a
	b.time = "6:30"

	fmt.Printf("%+v\n", *b)
	fmt.Printf("%+v\n", a)
	fmt.Printf("%p\n", b)
	fmt.Printf("%p\n", &a)



STRUCT INSIDE FUNCTION
type Rectangle func(int,int) int
type rectanglePara struct{
	length int
	breadth int  
	color string
	rect Rectangle
}

func main() {
	result:=rectanglePara{
		length:10,
		breadth:20,
		color:"red"
		rect:func(length int,breadth int ) int {
			return length*breadth
		}
	}


          CONDITIONAL STATEMENTS:
import (
	"fmt"
	"math"
)

func pow(x, n, lim float64) float64 {
	if v := math.Pow(x, n); v < lim {
		fmt.Println("within the limit")
	} else {
		fmt.Println(" greater than limit")
	}
	return 0
}

func main() {
	fmt.Println(
		pow(3, 2, 10),
		pow(3, 3, 20),
)
}


func main() {

	var  a int =100
	if a<1000{
		fmt.Println("greater")
	} else if a<0{
		fmt.Println("lesser")
	} else{
		fmt.Println("equal to zero")
	}

                                  SWITCH CASE:

import (
	"fmt"
	"runtime"
)

func main() {
	fmt.Print("Go runs on")
	os := runtime.GOOS
	switch os {
	case "darwin":
		fmt.Println("OS X")
	case "linux":
		fmt.Println("Linux")
	default:
		fmt.Printf(" %s.\n", os)
	}
}

func main() {

	var grade string = "B"
	var marks int = 90
	switch marks {
	case 90:
		grade = "A"
	case 80:
		grade = "B"
	}
	switch {
	case grade == "A":
		fmt.Printf("excellent")
	}



func main() {

	var i int = 1
	var j int = 2

	p := &i
	q := &j

	*p, *q = *q, *p

	fmt.Println(*p)
	fmt.Println(*q)

}

func main() {

	var i int = 1
	var j int = 2

	p := &i
	q := &j
	r := &i
	if *p == *q {
		fmt.Println(" p and q equal")
	} else if *q == *r {
		fmt.Println(" q and r equal")
	} else {
		fmt.Println(" p and r equal")
	}

}
ARRAY:

primes := [6]int{2, 3, 5, 7, 11, 13}
	var s []int = primes[1:4]
	fmt.Println(s)


var cheese [2]string
	cheese[0] = "MARIO"
	cheese[1] = "LU"
	fmt.Println(cheese[0])
	fmt.Println(cheese[1])
	fmt.Println(cheese)



func main() {

	names := [4]string{
		"john",
		"paul",
		"george",
		"ringo",
	}
	fmt.Println(names)
	a := names[0:2]
	b := names[1:3]
	fmt.Println(a, b)
	b[0] = "xxx"
	fmt.Println(a, b)
	fmt.Println(names)
}

x := []int{1, 2, 3, 4}
	fmt.Println(x)
	y := []bool{true, false, false, false}
	fmt.Println(y)

	z := []struct {
		p int
		q bool
	}{
		{1, true},
		{2, false},
	}

	
	fmt.Println(z)
}


s := []int{2, 3, 4, 5, 6, 7}
	z := s[1:4]
	fmt.Println(z)
	y := s[:2]
	fmt.Println(y)
	x := s[1:]
	fmt.Println(x)



func main() {
	var s []int
	fmt.Println(s, len(s), cap(s))
	if s == nil {
		fmt.Println("nil")
	}
}

